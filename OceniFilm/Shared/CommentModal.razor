@using OceniFilm.Services
@using OceniFilm.Models.Komentiranje

@*Modalno okno za komentiranje*@
<Modal @bind-Visible="@commentModalVisible" Closing="@OnModalClosing">
    <ModalContent Centered style="background-color: black; border-color: white;">
        <ModalHeader>
            <ModalTitle>Komentiraj film @naslovFilma</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <MemoEdit @bind-Text="@komentar" Rows="5" />
            <Button Style="margin-top: 15px;" Float="Float.End" Color="Color.Light" Outline Clicked="@OnCommentAdd">
                <Icon Name="IconName.PlusSquare"></Icon>
            </Button>
        </ModalBody>
    </ModalContent>
</Modal>
<Snackbar @ref="snackbarCommentAddSuccess">
  <SnackbarBody>
    Komentar je bil uspešno dodan
  </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarCommentAddFailure" Color="SnackbarColor.Danger">
  <SnackbarBody>
    Zapišite komentar!
  </SnackbarBody>
</Snackbar>

@code {
    private Snackbar snackbarCommentAddSuccess;
    private Snackbar snackbarCommentAddFailure;

    public string komentar;

    [Parameter]
    public EventCallback<string> komentarChanged { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    [Inject]
    public ICommentService CommentService { get; set; }

    [Parameter]
    public bool commentModalVisible { get; set; }

    [Parameter]
    public EventCallback<bool> commentModalVisibleChanged { get; set; }

    [Parameter]
    public string naslovFilma { get; set; } = string.Empty;

    private string prikaznoIme { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            prikaznoIme = authState.User.Identity.Name;
        }
    }

    private async Task OnCommentAdd()
    {
        if (!String.IsNullOrEmpty(komentar))
        {
            await snackbarCommentAddFailure.Hide();
            await snackbarCommentAddSuccess.Show();

            Komentar novKomentar = new()
            {
                DatumZapisa = DateTime.Now,
                Komentator = new() { PrikaznoIme = prikaznoIme },
                KomentiranFilm = new() { Naslov = naslovFilma },
                Vsebina = komentar
            };

            await CommentService.CreateCommentAsync(novKomentar);

            commentModalVisible = false;
            await commentModalVisibleChanged.InvokeAsync(commentModalVisible);
            await komentarChanged.InvokeAsync(komentar);
            komentar = string.Empty;
            return;
        }
        else
        {
            await snackbarCommentAddSuccess.Hide();
            await snackbarCommentAddFailure.Show();
        }
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        commentModalVisible = false;
        await commentModalVisibleChanged.InvokeAsync(commentModalVisible);
        return;
    }
}