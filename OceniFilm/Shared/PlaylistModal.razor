@using OceniFilm.Models.Seznami

@*Modalno okno za dodajanje filma na seznam*@
<Modal @bind-Visible="@playlistModalVisible" Closing="@OnModalClosing">
    <ModalContent Centered style="background-color: black; border-color: white;">
        <ModalHeader>
            <ModalTitle>!naslovFilma! (!letoIzdaje!)</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody Style="padding-top: 0 !important;">
            <Field Horizontal>
                <FieldBody ColumnSize="ColumnSize.Is12">
                    <FieldLabel>Izberi obstoječi seznam predvajanja</FieldLabel>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                        <Select @bind-SelectedValue="@selectedValue">
                            @foreach(var sez in mockSeznam)
                            {
                                <SelectItem Value="@sez.NazivSeznama">@sez.NazivSeznama</SelectItem>
                            }
                        </Select>
                        <Button Color="Color.Light" Outline>
                            <Icon Name="IconName.PlusSquare"></Icon>
                        </Button>
                    </Div>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is12">
                    <FieldLabel>Ustvari nov seznam predvajanja</FieldLabel>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                        <TextEdit @bind-Text="@noviSeznam" Placeholder="Vnesi ime seznama.."></TextEdit>
                        <Button Color="Color.Light" Outline>
                            <Icon Name="IconName.PlusSquare"></Icon>
                        </Button>
                    </Div>
                </FieldBody>
            </Field>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    int selectedValue;

    [Parameter]
    public bool playlistModalVisible { get; set; }

    [Parameter]
    public EventCallback<bool> playlistModalVisibleChanged { get; set; }

    string selectedDropValue { get; set; } = "prazno";

    public List<SeznamFilmov> mockSeznam = new();

    public string noviSeznam;

    protected override async Task OnInitializedAsync()
    {
        mockSeznam.Add(
            new SeznamFilmov
                {
                    Uporabnik = new Uporabnik { UporabniskoIme = "Janez123" },
                    NazivSeznama = "Zdravo",
                    Filmi = new List<Film>
                        {
                        new()
                        {
                            Naslov = "The Batman"
                        },
                        new()
                        {
                            Naslov = "Spider-Man: Homecoming"
                        },
                        new()
                        {
                            Naslov = "Titanic"
                        }
                        }
                }
        );
        mockSeznam.Add(
            new SeznamFilmov
                {
                    Uporabnik = new Uporabnik { UporabniskoIme = "Janez123" },
                    NazivSeznama = "Ko te jebe",
                    Filmi = new List<Film>
                        {
                        new()
                        {
                            Naslov = "The Batman"
                        },
                        new()
                        {
                            Naslov = "Spider-Man: Homecoming"
                        },
                        new()
                        {
                            Naslov = "Titanic"
                        }
                        }
                }
        );
        mockSeznam.Add(
            new SeznamFilmov
                {
                    Uporabnik = new Uporabnik { UporabniskoIme = "Janez123" },
                    NazivSeznama = "Slabi filmi",
                    Filmi = new List<Film>
                        {
                        new()
                        {
                            Naslov = "The Batman"
                        },
                        new()
                        {
                            Naslov = "Spider-Man: Homecoming"
                        },
                        new()
                        {
                            Naslov = "Titanic"
                        }
                        }
                }
        );
        await base.OnInitializedAsync();
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        playlistModalVisible = false;
        await playlistModalVisibleChanged.InvokeAsync(playlistModalVisible);
        return;
    }
}