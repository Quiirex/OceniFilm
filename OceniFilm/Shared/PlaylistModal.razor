@using OceniFilm.Models.Seznami
@using OceniFilm.Services

@*Modalno okno za dodajanje filma na seznam*@
<Modal @bind-Visible="@playlistModalVisible" Closing="@OnModalClosing">
    <ModalContent Centered style="background-color: black; border-color: white;">
        <ModalHeader>
            <ModalTitle>@naslovFilma (@letoIzdaje)</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody Style="padding-top: 0 !important;">
            <Field Horizontal>
                <FieldBody ColumnSize="ColumnSize.Is12">
                    <FieldLabel>Izberi obstoječi seznam predvajanja</FieldLabel>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                        <Select @bind-SelectedValue="@izbraniSeznam">
                            @if (seznamFilmov != null)
                            {
                                @foreach (var seznam in seznamFilmov)
                                {
                                    <SelectItem Value="@seznam.NazivSeznama">@seznam.NazivSeznama</SelectItem>
                                }
                            }
                        </Select>
                        @if (seznamFilmov != null)
                            {
                            <Button Color="Color.Light" Outline Clicked="@OnAddToPlaylist">
                                <Icon Name="IconName.PlusSquare"></Icon>
                            </Button>
                            }
                        </Div>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is12">
                    <FieldLabel>Ustvari nov seznam predvajanja</FieldLabel>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                        <TextEdit @bind-Text="@noviSeznam" Placeholder="Vnesi ime seznama.."></TextEdit>
                        <Button Color="Color.Light" Outline Clicked="@OnAddPlaylist">
                            <Icon Name="IconName.PlusSquare"></Icon>
                        </Button>
                    </Div>
                </FieldBody>
            </Field>
        </ModalBody>
    </ModalContent>
</Modal>
<Snackbar @ref="snackbarToPlaylistAddSuccess">
  <SnackbarBody>
    Film uspešno dodan na seznam
  </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarToPlaylistAddFailure" Color="SnackbarColor.Danger">
  <SnackbarBody>
    Prišlo je do napake pri dodajanju filma na izbrani seznam!
  </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarPlaylistAddSuccess">
  <SnackbarBody>
    Nov seznam filmov uspešno dodan
  </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarPlaylistAddFailure" Color="SnackbarColor.Danger">
  <SnackbarBody>
    Vnesite naziv novega seznama!
  </SnackbarBody>
</Snackbar>

@code {
    private string izbraniSeznam;
    private string noviSeznam;

    [Parameter]
    public EventCallback<string> noviSeznamChanged { get; set; }

    private Snackbar snackbarToPlaylistAddSuccess;
    private Snackbar snackbarToPlaylistAddFailure;
    private Snackbar snackbarPlaylistAddSuccess;
    private Snackbar snackbarPlaylistAddFailure;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    [Inject]
    public IPlaylistService PlaylistService { get; set; }

    [Parameter]
    public bool playlistModalVisible { get; set; }

    [Parameter]
    public EventCallback<bool> playlistModalVisibleChanged { get; set; }

    [Parameter]
    public string naslovFilma { get; set; } = string.Empty;

    [Parameter]
    public int letoIzdaje { get; set; }

    [Parameter]
    public string poster { get; set; } = string.Empty;

    private string selectedDropValue { get; set; } = string.Empty;

    private IEnumerable<SeznamFilmov> seznamFilmov;

    private string prikaznoIme = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await authenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {
            prikaznoIme = authState.User.Identity.Name;
        }

        seznamFilmov = await PlaylistService.GetSeznamFilmovByUserAsync(prikaznoIme);

        if (seznamFilmov.Any())
        {
            izbraniSeznam = seznamFilmov.FirstOrDefault().NazivSeznama;
        }
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        playlistModalVisible = false;
        await playlistModalVisibleChanged.InvokeAsync(playlistModalVisible);
        return;
    }

    private async Task OnAddToPlaylist()
    {
        if (!String.IsNullOrEmpty(izbraniSeznam))
        {
            Film film = new() { Naslov = naslovFilma, Poster = poster };
            try
            {
                await PlaylistService.AddToPlaylistAsync(prikaznoIme, izbraniSeznam, film);
                await snackbarToPlaylistAddFailure.Hide();
                await snackbarToPlaylistAddSuccess.Show();
            }
            catch
            {
                await snackbarToPlaylistAddSuccess.Hide();
                await snackbarToPlaylistAddFailure.Show();
            }
        }
        else
        {
            await snackbarToPlaylistAddSuccess.Hide();
            await snackbarToPlaylistAddFailure.Show();
        }
    }

    private async Task OnAddPlaylist()
    {
        if (!String.IsNullOrEmpty(noviSeznam))
        {
            SeznamFilmov novSeznamFilmov = new()
            {
                Filmi = new(),
                NazivSeznama = noviSeznam,
                Uporabnik = new() { PrikaznoIme = prikaznoIme }
            };

            try
            {
                await PlaylistService.CreatePlaylistAsync(novSeznamFilmov);
                await noviSeznamChanged.InvokeAsync(noviSeznam);

                await snackbarPlaylistAddFailure.Hide();
                await snackbarPlaylistAddSuccess.Show();

                noviSeznam = string.Empty;

                seznamFilmov = await PlaylistService.GetSeznamFilmovByUserAsync(prikaznoIme);

                this.StateHasChanged();
            }
            catch
            {
                await snackbarPlaylistAddSuccess.Hide();
                await snackbarPlaylistAddFailure.Show();
            }
        }
        else
        {
            await snackbarPlaylistAddSuccess.Hide();
            await snackbarPlaylistAddFailure.Show();
        }
    }
}