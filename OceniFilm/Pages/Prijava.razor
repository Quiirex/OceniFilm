@page "/prijava"
@using OceniFilm.Models
@using OceniFilm.Services
@using System.Net;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="login-container" style="margin-left: 350px !important; margin-right: 350px !important; margin-top: 150px;">
    <img src="https://i.imgur.com/mDKZe9a.png" style="display: block; height: 150px; margin: auto;"/><br/>
    <Validations @ref="validations" Mode="ValidationMode.Auto" Model="@prijava" ValidateOnLoad="false">
        <Validation>
            <Field>
                <FieldLabel>Email</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.User"></Icon>
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@prijava.Email" Placeholder="Vnesi email...">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>
        </Validation>
        <Validation>
            <Field>
                <FieldLabel>Geslo</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            <Icon Name="IconName.Lock"></Icon>
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@prijava.Geslo" Role="TextRole.Password" Placeholder="Vnesi geslo...">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>
        </Validation>
    </Validations>
    <Button style="float: right" Color="Color.Light" Outline Clicked="@OnLoginSubmit">Prijava</Button>
</div>
<Snackbar @ref="snackbarLoginSuccess">
  <SnackbarBody>
    Prijava uspešna! Preusmerjam...
  </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarLoginFailure" Color="SnackbarColor.Danger">
  <SnackbarBody>
    Prijava neuspešna! Prosimo preverite vnesene podatke
  </SnackbarBody>
</Snackbar>


@code {
    [Inject]
    public IAuthService AuthService { get; set; }

    private PrijavaUporabnika prijava = new();
    private Validations validations;
    private Snackbar snackbarLoginSuccess;
    private Snackbar snackbarLoginFailure;

    async Task OnLoginSubmit()
    {
        if (await validations.ValidateAll())
        {
            HttpResponseMessage httpResponseMessage = (await AuthService.LoginAsync(prijava));

            if (httpResponseMessage.StatusCode == HttpStatusCode.OK)
            {
                JwtToken jwt = await httpResponseMessage.Content.ReadAsAsync<JwtToken>();
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "jwt", jwt.Token);
                prijava = new PrijavaUporabnika();
                await validations.ClearAll();
                await snackbarLoginFailure.Hide();
                await snackbarLoginSuccess.Show();
                await Task.Delay(2000);
                StateHasChanged();
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                await validations.ClearAll();
                await snackbarLoginSuccess.Hide();
                await snackbarLoginFailure.Show();
            }
        }
        else
        {
            await validations.ClearAll();
            await snackbarLoginSuccess.Hide();
            await snackbarLoginFailure.Show();
        }
    }
}